<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Code Editor</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #282a36;
            color: #f8f8f2;
        }
        #editor {
            flex: 1;
            border: 1px solid #44475a;
            border-radius: 4px;
            margin: 10px;
        }
        #output {
            border-top: 1px solid #44475a;
            padding: 10px;
            background: #282a36;
            font-family: monospace;
            height: 150px;
            overflow-y: auto;
            color: #f8f8f2;
        }
        #language-selector, #run-button, #lint-button {
            margin: 10px;
            font-size: 16px;
        }
        #language-selector {
            background-color: #44475a;
            color: #f8f8f2;
            border: 1px solid #6272a4;
            padding: 8px;
            border-radius: 4px;
        }
        #run-button, #lint-button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        #run-button {
            background-color: #50fa7b;
            color: #282a36;
        }
        #lint-button {
            background-color: #bd93f9;
            color: #282a36;
        }
        #run-button:hover {
            background-color: #5af78e;
        }
        #lint-button:hover {
            background-color: #c2a3f1;
        }
        .controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 0 10px;
        }
        .error {
            color: #ff5555;
        }
        .warning {
            color: #ffb86c;
        }
        .loading {
            color: #6272a4;
            font-style: italic;
        }
        h1 {
            color: #bd93f9;
            text-align: center;
            margin: 10px 0;
        }
        pre {
            color: #f8f8f2;
            margin: 0;
        }
    </style>
</head>
<body>
    <h1>Online Code Editor</h1>
    <div class="controls">
        <select id="language-selector">
            <option value="javascript">JavaScript</option>
            <option value="python">Python</option>
            <option value="java">Java</option>
            <option value="cpp">C++</option>
            <option value="c">C</option>
        </select>
        <button id="run-button">Run Code</button>
        <button id="lint-button">Check Code</button>
    </div>
    <textarea id="editor"></textarea>
    <div id="output"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/show-hint.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/javascript-hint.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/show-hint.min.css">

    <script>
        // Initialize CodeMirror editor
        const editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
            mode: 'javascript',
            lineNumbers: true,
            theme: 'dracula',
            extraKeys: { "Ctrl-Space": "autocomplete" }
        });

        // Output container
        const output = document.getElementById('output');

        // Language modes mapping
        const languageModes = {
            javascript: 'javascript',
            python: 'python',
            java: 'text/x-java',
            cpp: 'text/x-c++src',
            c: 'text/x-csrc'
        };

        // Change editor mode based on language selection
        document.getElementById('language-selector').addEventListener('change', (event) => {
            const selectedLanguage = event.target.value;
            editor.setOption('mode', languageModes[selectedLanguage]);
        });

        // Enable autocomplete on keypress
        editor.on('keypress', (cm, event) => {
            if (!cm.state.completionActive && event.key.length === 1) {
                CodeMirror.commands.autocomplete(cm, null, { completeSingle: false });
            }
        });

        // Function to send code to server
        async function sendCodeToServer(endpoint) {
            const code = editor.getValue();
            const language = document.getElementById('language-selector').value;
            
            output.innerHTML = '<div class="loading">Processing code...</div>';
            
            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, language })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                throw new Error(`Failed to process code: ${error.message}`);
            }
        }

        // Run code button handler
        document.getElementById('run-button').addEventListener('click', async () => {
            try {
                const result = await sendCodeToServer('/execute');
                output.innerHTML = `<pre>${result.output}</pre>`;
            } catch (error) {
                output.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        });

        // Lint code button handler
        document.getElementById('lint-button').addEventListener('click', async () => {
            try {
                const result = await sendCodeToServer('/checklint');
                output.innerHTML = ''; // Clear previous output
                
                if (result.comments && result.comments.length > 0) {
                    result.comments.forEach(comment => {
                        const div = document.createElement('div');
                        div.className = comment.type;
                        div.textContent = `Line ${comment.line}: ${comment.message}`;
                        output.appendChild(div);
                    });
                } else {
                    output.innerHTML = '<div>No issues found!</div>';
                }
            } catch (error) {
                output.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        });
    </script>
</body>
</html> -->































<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Code Editor</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #282a36;
            color: #f8f8f2;
        }
        #editor {
            flex: 1;
            border: 1px solid #44475a;
            border-radius: 4px;
            margin: 10px;
        }
        #output {
    border-top: 1px solid #44475a;
    padding: 15px;
    background: #282a36;
    font-family: "Courier New", monospace;
    color: #f8f8f2;
    height: auto;
    max-height: 300px;
    overflow-y: auto;
    box-sizing: border-box;
    border-radius: 8px;
    word-wrap: break-word;
    white-space: pre-wrap;
    font-size: 14px;
}

#output pre {
    margin: 0;
    font-family: "Courier New", monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
    line-height: 1.5;
}

.error {
    color: #ff5555;
    font-weight: bold;
    margin: 5px 0;
}

.warning {
    color: #ffb86c;
    font-weight: bold;
    margin: 5px 0;
}

.loading {
    color: #6272a4;
    font-style: italic;
    text-align: center;
}

@media (max-width: 768px) {
    #output {
        padding: 10px;
        max-height: 200px;
    }

    #output pre {
        font-size: 13px;
    }
}

@media (max-width: 480px) {
    #output {
        padding: 8px;
        max-height: 150px;
    }

    #output pre {
        font-size: 12px;
    }
}

        #language-selector, #run-button, #lint-button {
            margin: 10px;
            font-size: 16px;
        }
        #language-selector {
            background-color: #44475a;
            color: #f8f8f2;
            border: 1px solid #6272a4;
            padding: 8px;
            border-radius: 4px;
        }
        #run-button, #lint-button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        #run-button {
            background-color: #50fa7b;
            color: #282a36;
        }
        #lint-button {
            background-color: #bd93f9;
            color: #282a36;
        }
        #run-button:hover {
            background-color: #5af78e;
        }
        #lint-button:hover {
            background-color: #c2a3f1;
        }
        .controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 0 10px;
        }

        h1 {
            color: #bd93f9;
            text-align: center;
            margin: 10px 0;
        }
        pre {
            color: #f8f8f2;
            margin: 0;
        }
    </style>
</head>
<body>
    <h1>Online Code Editor</h1>
    <div class="controls">
        <select id="language-selector">
            <option value="javascript">JavaScript</option>
            <option value="python">Python</option>
            <option value="java">Java</option>
            <option value="cpp">C++</option>
            <option value="c">C</option>
        </select>
        <button id="run-button">Run Code</button>
        <button id="lint-button">Check Code</button>
    </div>
    <textarea id="editor"></textarea>
    <div id="output"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/show-hint.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/javascript-hint.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/hint/show-hint.min.css">

    <script>
        // Initialize CodeMirror editor
        const editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
            mode: 'javascript',
            lineNumbers: true,
            theme: 'dracula',
            extraKeys: { "Ctrl-Space": "autocomplete" }
        });

        // Output container
        const output = document.getElementById('output');

        // Language modes mapping
        const languageModes = {
            javascript: 'javascript',
            python: 'python',
            java: 'text/x-java',
            cpp: 'text/x-c++src',
            c: 'text/x-csrc'
        };

        // Change editor mode based on language selection
        document.getElementById('language-selector').addEventListener('change', (event) => {
            const selectedLanguage = event.target.value;
            editor.setOption('mode', languageModes[selectedLanguage]);
        });

        // Enable autocomplete on keypress
        editor.on('keypress', (cm, event) => {
            if (!cm.state.completionActive && event.key.length === 1) {
                CodeMirror.commands.autocomplete(cm, null, { completeSingle: false });
            }
        });

        // Function to send code to server
        async function sendCodeToServer(endpoint) {
            const code = editor.getValue();
            const language = document.getElementById('language-selector').value;
            
            output.innerHTML = '<div class="loading">Processing code...</div>';
            
            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, language })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                throw new Error(`Failed to process code: ${error.message}`);
            }
        }

        // Run code button handler
        document.getElementById('run-button').addEventListener('click', async () => {
            try {
                const result = await sendCodeToServer('/execute');
                output.innerHTML = `<pre>${result.output}</pre>`;
            } catch (error) {
                output.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        });

        // Lint code button handler
        document.getElementById('lint-button').addEventListener('click', async () => {
            try {
                const result = await sendCodeToServer('/checklint');
                output.innerHTML = ''; // Clear previous output
                output.innerHTML = `<pre>${result.comments}</pre>`;
                

            } catch (error) {
                output.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        });
    </script>
</body>
</html> 


 -->
 <!DOCTYPE html>
 <html lang="en">
 <head>
   <meta charset="UTF-8" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <title>DEV IDE</title>
 
   <!-- CodeMirror & jsPDF -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/material-darker.min.css" />
   <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
 
   <!-- Fonts -->
   <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500;700&family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
 
   <style>
     :root {
       --neon-blue: #89b4fa;
       --neon-pink: #f38ba8;
       --dark-bg: #1e1e2e;
       --light-bg: #f5f5f5;
       --glass-light: rgba(255, 255, 255, 0.1);
       --glass-dark: rgba(255, 255, 255, 0.05);
     }
 
     body {
       font-family: 'Poppins', sans-serif;
       margin: 0;
       padding: 0;
       height: 100vh;
       display: flex;
       flex-direction: column;
       align-items: center;
       background: var(--dark-bg);
       color: #cdd6f4;
       transition: background 0.4s ease, color 0.4s ease;
     }
 
     h1 {
       font-family: 'Orbitron', sans-serif;
       font-size: 2.5rem;
       color: var(--neon-blue);
       margin-top: 20px;
       text-shadow: 0 0 10px var(--neon-blue);
       transition: color 0.4s ease, text-shadow 0.4s ease;
     }
 
     .controls {
       margin: 20px 0;
       display: flex;
       justify-content: space-between;
       width: 90%;
       max-width: 1200px;
       flex-wrap: wrap;
     }
 
     .left-controls, .right-controls {
       display: flex;
       gap: 12px;
       align-items: center;
     }
 
     /* Shared button and select styles */
     button, select {
       padding: 12px 20px;
       border-radius: 8px;
       border: 2px solid;
       font-weight: bold;
       cursor: pointer;
       transition: all 0.3s ease;
       backdrop-filter: blur(8px);
     }
 
     /* Select Styles */
     select {
       background: rgba(137, 180, 250, 0.1);
       border-color: rgba(137, 180, 250, 0.5);
       color: #cdd6f4;
     }
 
     select:hover {
       background: rgba(137, 180, 250, 0.2);
       box-shadow: 0 0 10px rgba(137, 180, 250, 0.4);
     }
 
     /* Individual button styles */
     #run-button {
       background: #22c55e;
       border-color: #16a34a;
       color: #ffffff;
     }
 
     #run-button:hover {
       background: #16a34a;
       box-shadow: 0 0 15px #22c55e;
     }
 
     #lint-button {
       background: #facc15;
       border-color: #eab308;
       color: #1a1a1a;
     }
 
     #lint-button:hover {
       background: #eab308;
       box-shadow: 0 0 15px #facc15;
     }
 
     #cre-rep {
       background: #ef4444;
       border-color: #dc2626;
       color: #ffffff;
     }
 
     #cre-rep:hover {
       background: #dc2626;
       box-shadow: 0 0 15px #ef4444;
     }
 
     /* Editor container */
     .editor-container {
       width: 90%;
       max-width: 1200px;
       display: flex;
       flex-direction: column;
       gap: 15px;
       background: var(--glass-dark);
       border-radius: 15px;
       padding: 20px;
       backdrop-filter: blur(10px);
       box-shadow: 0 0 30px rgba(137, 180, 250, 0.2);
       transition: background 0.4s ease;
     }
 
     .CodeMirror {
       height: 400px;
       border-radius: 8px;
       font-size: 14px;
       background: rgba(0, 0, 0, 0.4);
       color: #f5f5f5;
     }
 
     #output-container {
       background: rgba(0, 0, 0, 0.4);
       color: #cdd6f4;
       border-radius: 8px;
       padding: 12px;
       font-family: "Courier New", monospace;
       max-height: 200px;
       overflow-y: auto;
       white-space: pre-wrap;
       font-size: 14px;
       box-shadow: inset 0 0 10px rgba(137, 180, 250, 0.1);
       transition: background 0.4s ease, color 0.4s ease;
     }
 
     /* Light Theme Styles */
     .theme-light {
       background: var(--light-bg);
       color: #1a1a1a;
     }
 
     .theme-light h1 {
       color: #111;
       text-shadow: none;
     }
 
     .theme-light .editor-container {
       background: rgba(255, 255, 255, 0.6);
       box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);
     }
 
     .theme-light select {
       background: rgba(255, 255, 255, 0.6);
       color: #1a1a1a;
       border-color: #aaa;
     }
 
     .theme-light select:hover {
       box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
     }
 
     .theme-light #run-button {
       background: #16a34a;
       border-color: #15803d;
       color: #fff;
     }
 
     .theme-light #lint-button {
       background: #eab308;
       border-color: #ca8a04;
       color: #1a1a1a;
     }
 
     .theme-light #cre-rep {
       background: #dc2626;
       border-color: #b91c1c;
       color: #fff;
     }
 
     .theme-light #output-container {
       background: rgba(255, 255, 255, 0.5);
       color: #111;
     }
 
     /* Neon glow animation for dark theme */
     .neon-glow {
       animation: neon-glow 1.5s infinite alternate;
     }
 
     @keyframes neon-glow {
       0% { text-shadow: 0 0 5px var(--neon-blue), 0 0 10px var(--neon-blue); }
       100% { text-shadow: 0 0 15px var(--neon-pink), 0 0 25px var(--neon-pink); }
     }
   </style>
 </head>
 
 <body class="theme-dark">
   <h1 class="neon-glow">DEV IDE</h1>
 
   <div class="controls">
     <div class="left-controls">
       <select id="theme-selector">
         <option value="dark">Dark Mode</option>
         <option value="light">Light Mode</option>
       </select>
 
       <select id="language-selector">
         <option value="javascript">JavaScript</option>
         <option value="python">Python 2</option>
         <option value="java">Java</option>
         <option value="cpp">C++</option>
         <option value="c">C</option>
       </select>
     </div>
 
     <div class="right-controls">
       <button id="run-button">Run Code</button>
       <button id="lint-button">Check Code</button>
       <button id="cre-rep">Create Report</button>
       <button onclick="window.location.href='/voice'" style="margin-top: 10px;">
  🎙️ Voice to Code
</button>
   </div>
 
   <div class="editor-container">
     <textarea id="editor"></textarea>
     <div id="output-container">Output will be displayed here...</div>
   </div>
 
   <script>
     const editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
       mode: 'javascript',
       lineNumbers: true,
       theme: 'material-darker'
     })
 
     const themeSelector = document.getElementById('theme-selector')
     const langSelector = document.getElementById('language-selector')
     const body = document.body
     const neonText = document.querySelector('h1')
 
     themeSelector.addEventListener('change', event => {
       const theme = event.target.value
 
       if (theme === 'light') {
         body.className = 'theme-light'
         neonText.classList.remove('neon-glow')
         editor.setOption('theme', 'default')
       } else {
         body.className = 'theme-dark'
         neonText.classList.add('neon-glow')
         editor.setOption('theme', 'material-darker')
       }
     })

 
         async function sendCodeToServer(endpoint) {
             const code = editor.getValue();
             const language = document.getElementById('language-selector').value;
             try {
                 const response = await fetch(endpoint, {
                     method: 'POST',
                     headers: {'Content-Type': 'application/json'},
                     body: JSON.stringify({ code, language })
                 });
                 return await response.json();
             } catch (error) {
                 return { output: `Error: ${error.message}` };
             }
         }
 
         document.getElementById('run-button').addEventListener('click', async () => {
            const button = document.getElementById('run-button');
            
            console.log("Running code... Please wait ⏳");
            button.textContent = "Processing...";
            button.disabled = true;
        
            try {
                const result = await sendCodeToServer('/execute');
                document.getElementById('output-container').innerText = result.output;
            } catch (error) {
                console.error("Error running code:", error);
                alert("An error occurred while running the code.");
            } finally {
                button.textContent = "Run Code";
                button.disabled = false;
            }
        });
        
 
         document.getElementById('cre-rep').addEventListener('click', async () => {
            console.log("Processing... Please wait ⏳");
        
            const button = document.getElementById('cre-rep');
            button.textContent = "Processing...";
            button.disabled = true;
        
            try {
                // Send request and check response
                const result = await sendCodeToServer('/crerep');
        
                if (!result || !result.output) {
                    console.error("Error: No output received from the server.");
                    alert("Failed to generate report. No data received.");
                    return;
                }
        
                console.log("Generating PDF...");
        
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
        
                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();
                const margin = 10;
                const lineHeight = 10;
                const maxWidth = pageWidth - 2 * margin;
                const splitText = doc.splitTextToSize(result.output, maxWidth);
        
                let y = margin + 10;
                let pageNumber = 1;
        
                function addPageFooter() {
                    doc.setFontSize(10);
                    doc.text(`Page ${pageNumber}`, pageWidth / 2, pageHeight - margin, { align: 'center' });
                    doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
                    pageNumber++;
                }
        
                doc.setFont('times', 'bold');
                doc.setFontSize(16);
                doc.text('Generated Report', pageWidth / 2, margin + 5, { align: 'center' });
        
                doc.setFont('times', 'normal');
                doc.setFontSize(12);
        
                splitText.forEach((line) => {
                    if (y + lineHeight > pageHeight - margin - 10) {
                        addPageFooter();
                        doc.addPage();
                        y = margin + 10;
                    }
                    doc.text(line, margin + 5, y);
                    y += lineHeight;
                });
        
                addPageFooter();
                doc.save('generated-report.pdf');
                console.log("PDF Generated Successfully ✅");
        
            } catch (error) {
                console.error("Error generating report:", error);
                alert("An error occurred while generating the report.");
            } finally {
                button.textContent = "Create Report";
                button.disabled = false;
            }
        });
        
 
        document.getElementById('lint-button').addEventListener('click', async () => {
            const button = document.getElementById('lint-button');
            
            console.log("Checking code... Please wait ⏳");
            button.textContent = "Processing...";
            button.disabled = true;
        
            try {
                const result = await sendCodeToServer('/checklint');
                document.getElementById('output-container').innerText = result.comments || 'No issues found!';
            } catch (error) {
                console.error("Error checking code:", error);
                alert("An error occurred while checking the code.");
            } finally {
                button.textContent = "Check Code";
                button.disabled = false;
            }
        });
        
     </script>
 </body>
 </html>
 